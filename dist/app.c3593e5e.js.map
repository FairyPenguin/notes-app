{"version":3,"sources":["app.js"],"names":["noteContainer","document","querySelector","modalContainer","form","titleInput","noteBodyInput","notesArray","localStorage","getItem","JSON","parse","getNotesFromLocalStorage","Note","title","body","id","Math","random","showAlertMessages","message","alertClass","alertDiv","createElement","className","appendChild","createTextNode","insertAdjacentElement","focus","setTimeout","remove","activeNoteModal","modalTitle","modalBody","textContent","classList","add","modalButton","addEventListener","removeNote","addNoteToLocalStorage","filter","NewNote","newNoteFunction","value","length","addtoArray","push","addNewNoteToList","console","log","stringify","forEach","note","newUINote","innerHTML","window","setItem","localNotes","notes","e","target","contains","currentNote","closest","Number","preventDefault"],"mappings":"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","file":"app.c3593e5e.js","sourceRoot":"../src","sourcesContent":["//* Global Query Selectors *//\n\nconst noteContainer = document.querySelector(\".note-container\");\nconst modalContainer = document.querySelector(\".modal-container\");\nconst form = document.querySelector(\"form\"); // Global Query Selectors\nconst titleInput = document.querySelector(\"#title\");\nconst noteBodyInput = document.querySelector(\"#note\");\nlet notesArray = []; //! Arrrrrrrrray\n\nif (localStorage.getItem(\"notes\")) {\n  notesArray = JSON.parse(localStorage.getItem(\"notes\"));\n}\n\n//! Trigger the getNotesFromLocalStorage function\ngetNotesFromLocalStorage();\n\n//* Class: for generating a new note\n\nclass Note {\n  constructor(title, body) {\n    this.title = title;\n    this.body = body;\n    this.id = Math.random();\n  }\n}\n/* \n*we push the para to the array which \n!is now coming from the (\"form inputs validation\")\n*as an argument, and reuse it agian in the array\n! now we have the problem of render the elements\n*/\n\n//* Function: Show alert messages *//\n\nfunction showAlertMessages(message, alertClass) {\n  const alertDiv = document.createElement(\"div\");\n  alertDiv.className = `message ${alertClass}`;\n  alertDiv.appendChild(document.createTextNode(message));\n  form.insertAdjacentElement(\"beforebegin\", alertDiv);\n  titleInput.focus();\n  setTimeout(() => alertDiv.remove(), 2000);\n}\n\n//* Function: view note in modal *//\nfunction activeNoteModal(title, body) {\n  const modalTitle = document.querySelector(\".modal-title\");\n  const modalBody = document.querySelector(\".modal-body\");\n  modalTitle.textContent = title;\n  modalBody.textContent = body;\n  modalContainer.classList.add(\"active\");\n}\n\n//*Event: close modal button *//\n\nconst modalButton = document\n  .querySelector(\".modal-btn\")\n  .addEventListener(\"click\", () => {\n    modalContainer.classList.remove(\"active\");\n  });\n\n//* Event: Note Buttons *//\nnoteContainer.addEventListener(\"click\", (e) => {\n  if (e.target.classList.contains(\"view-btn\")) {\n    const currentNote = e.target.closest(\".note\");\n    const currentTitle = currentNote.querySelector(\".note-title\").textContent;\n    const currentBody = currentNote.querySelector(\".note-body\").textContent;\n    activeNoteModal(currentTitle, currentBody);\n  }\n  // Delete note //\n  if (e.target.classList.contains(\"delete-btn\")) {\n    const currentNote = e.target.closest(\".note\");\n    showAlertMessages(\"Your note deleted\", \"remove-message\");\n    currentNote.remove();\n    const id = currentNote.querySelector(\"span\").textContent;\n    removeNote(Number(id)); //--> remove note from Local Storage function\n  }\n});\n\nfunction removeNote(id) {\n  //*this block of code is for guidance only\n  // for (let i = 0; i < notesArray.length; i++) {\n  //   console.log(`${notesArray[i].id}===${id}`);\n  // }\n  //! Code !\n  notesArray = notesArray.filter((NewNote) => NewNote.id != id);\n  addNoteToLocalStorage(notesArray);\n}\n\nfunction newNoteFunction() {\n  if (titleInput.value.length > 0 && noteBodyInput.value.length > 0) {\n    const NewNote = new Note(titleInput.value, noteBodyInput.value);\n\n    addtoArray(NewNote);\n\n    titleInput.value = \"\";\n    noteBodyInput.value = \"\";\n    // addNewNoteToList(NewNote);\n    showAlertMessages(\"Note Successfully added!\", \"success-message\");\n    titleInput.focus();\n  } else {\n    showAlertMessages(\"Please add both a title and a note\", \"alert-message\");\n  }\n}\n\n//* Notes Array function !\nfunction addtoArray(NewNote) {\n  //! Array !//\n  notesArray.push(NewNote);\n  addNewNoteToList(notesArray);\n  addNoteToLocalStorage(notesArray);\n  console.log(notesArray);\n  console.log(JSON.stringify(notesArray));\n  console.log(NewNote);\n}\n\nfunction addNewNoteToList() {\n  notesArray.forEach((note) => {\n    // note is the parameter used in\n    //  ${note.id}$, {note.title}$ and {note.body}\n\n    const newUINote = document.createElement(\"div\");\n    newUINote.classList.add(\"note\");\n    newUINote.innerHTML = `\n      <span hidden>${note.id}</span>\n      <h2 class=\"note-title\">${note.title}</h2>\n      <p class=\"note-body\">${note.body}</p>\n      <div class=\"note-btns\">\n        <button class=\"note-btn view-btn\">View Detail</button>\n        <button class=\"note-btn delete-btn\">Delete Note</button>\n      </div>\n    `;\n\n    noteContainer.appendChild(newUINote);\n  });\n}\n\n//* form submit\nform.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n\n  //* form inputs newNoteFunction *//\n  newNoteFunction();\n});\n\n//! add to local storage\nfunction addNoteToLocalStorage(notesArray) {\n  window.localStorage.setItem(\"notes\", JSON.stringify(notesArray));\n}\n\n//! get from local storage\nfunction getNotesFromLocalStorage() {\n  let localNotes = window.localStorage.getItem(\"notes\");\n  if (localNotes) {\n    let notes = JSON.parse(localNotes);\n    console.log(notes);\n    addNewNoteToList();\n  }\n}\n"]}
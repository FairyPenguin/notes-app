{"version":3,"sources":["global.js","modal-alert.js","app.js"],"names":["noteContainer","document","querySelector","modalContainer","form","titleInput","noteInput","activeNoteModal","title","body","modalTitle","modalBody","textContent","classList","add","notesArray","modalBtn","addEventListener","remove","showAlertMessage","message","alertClass","alertDiv","createElement","className","appendChild","createTextNode","insertAdjacentElement","focus","setTimeout","addNotesToArray","console","log","note","id","Math","random","push","addNotesToUI","addNoteToLocalStorage","innerHTML","forEach","newUINote","window","localStorage","setItem","JSON","stringify","getNotesFromLocalStorage","localNotes","getItem","notes","parse","removeNote","filter","e","preventDefault","value","length","target","contains","currentNote","closest","currentTitle","currentBody","Number"],"mappings":"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","file":"app.5941a19a.js","sourceRoot":"../src","sourcesContent":["//* Global Query Selectors *//\n\nconst noteContainer = document.querySelector(\".note-container\");\nconst modalContainer = document.querySelector(\".modal-container\");\nconst form = document.querySelector(\"form\"); // Global Query Selectors\nconst titleInput = document.querySelector(\"#title\");\nconst noteInput = document.querySelector(\"#note\");\n\nexport { noteContainer, modalContainer, form, titleInput, noteInput };\n","import {\n  notesArray,\n  titleInput,\n  noteInput,\n  noteContainer,\n  form,\n  modalContainer,\n} from \"./global.js\";\n\nnoteInput;\ntitleInput;\nform;\nnoteContainer;\nnotesArray;\nmodalContainer;\n\n//* Function: view note in modal *//\nfunction activeNoteModal(title, body) {\n  const modalTitle = document.querySelector(\".modal-title\");\n  const modalBody = document.querySelector(\".modal-body\");\n  modalTitle.textContent = title;\n  modalBody.textContent = body;\n  modalContainer.classList.add(\"active\");\n}\n\n//*Event: modal close  button *//\n\nconst modalBtn = document\n  .querySelector(\".modal-btn\")\n  .addEventListener(\"click\", () => {\n    modalContainer.classList.remove(\"active\");\n  });\n\n//* Function: Show alert messages *// Working 100%\n\nfunction showAlertMessage(message, alertClass) {\n  const alertDiv = document.createElement(\"div\");\n  alertDiv.className = `message ${alertClass}`;\n  alertDiv.appendChild(document.createTextNode(message));\n  form.insertAdjacentElement(\"beforebegin\", alertDiv);\n  titleInput.focus();\n  setTimeout(() => alertDiv.remove(), 2000);\n}\n\nexport { activeNoteModal, showAlertMessage, modalBtn };\n","//* Imports *//\nimport { showAlertMessage, activeNoteModal, modalBtn } from \"./modal-alert\";\nimport {\n  titleInput,\n  noteInput,\n  noteContainer,\n  modalContainer,\n  form,\n} from \"./global.js\";\n\nmodalContainer;\nnoteInput;\ntitleInput;\nform;\nnoteContainer;\n\n// -------------- Main Array----------------\n\nlet notesArray = []; //! Array\n\n/*------ Check the localstorage for data and\n prevent empty array and by update the array with the localstorage data\n------*/\n\n//! check the localstorage\n\nif (localStorage.getItem(\"notes\")) {\n  notesArray = JSON.parse(localStorage.getItem(\"notes\"));\n}\n\n//------ Triger the [getNotesFromLocalStorage] function------//\n\ngetNotesFromLocalStorage(); //! get from localstorage\n\n//-----------------Form:prevent defualt && Validation---------\n\nform.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n  const noteInput = document.querySelector(\"#note\");\n\n  // validate inputs\n  if (titleInput.value.length > 0 && noteInput.value.length > 0) {\n    addNotesToArray(titleInput.value, noteInput.value); //!Array Function\n    titleInput.value = \"\";\n    noteInput.value = \"\";\n    showAlertMessage(\"Note successfully added\", \"success-message\");\n    titleInput.focus();\n  } else {\n    showAlertMessage(\"Please add both a title and a note\", \"alert-message\");\n  }\n});\n\n//-------------Add Note to the main array function------------------//\n\nfunction addNotesToArray(titleInput, noteInput) {\n  console.log(\"addNotesToArray\");\n  const note = {\n    id: Math.random(),\n    title: titleInput,\n    body: noteInput,\n  };\n\n  //push notes(from user input) to the array\n  notesArray.push(note);\n\n  //add notes to the ui\n  addNotesToUI(notesArray);\n\n  // add notes to the local storage\n  addNoteToLocalStorage(notesArray);\n\n  console.log(notesArray);\n}\n\n//------------------Notes to UI function------------//\n/* \nadd notes to the ui function && \nprevent the notes from duplicate by empty the notes div\n*/\n\nfunction addNotesToUI(notesArray) {\n  //empty the notes div\n  noteContainer.innerHTML = \"\";\n  notesArray.forEach((note) => {\n    let newUINote = document.createElement(\"div\");\n    newUINote.classList.add(\"note\");\n    newUINote.innerHTML = `\n    <span hidden>${note.id}</span>\n    <h2 class=\"note-title\">${note.title}</h2>\n    <p class=\"note-body\">${note.body}</p>\n    <div class=\"note-btns\">\n      <button class=\"note-btn view-btn\">View Detail</button>\n      <button class=\"note-btn delete-btn\">Delete Note</button>\n    </div>\n  `;\n    noteContainer.appendChild(newUINote);\n    console.log(newUINote);\n  });\n}\n\n/*\n--- Modal Function &&\n Modal Close Button-->imported from modal-alert.js---\n*/\n\nactiveNoteModal; //Modal Function\nmodalBtn; //Modal Close Button\n\n//-----------Buttons: View && Delete ----------//\n\n// Event: Note Buttons\nnoteContainer.addEventListener(\"click\", (e) => {\n  if (e.target.classList.contains(\"view-btn\")) {\n    const currentNote = e.target.closest(\".note\");\n    const currentTitle = currentNote.querySelector(\".note-title\").textContent;\n    const currentBody = currentNote.querySelector(\".note-body\").textContent;\n    activeNoteModal(currentTitle, currentBody);\n  }\n  //Delete Button [Deletes note from the UI]\n  if (e.target.classList.contains(\"delete-btn\")) {\n    const currentNote = e.target.closest(\".note\");\n    showAlertMessage(\"Your note was permanently deleted\", \"remove-message\");\n    currentNote.remove();\n    const id = currentNote.querySelector(\"span\").textContent;\n    removeNote(Number(id));\n  }\n});\n\n//------------Local Storage ------------------//\n\n/*\nAdd - remove - check - retrive\n\n*/\n\n//---------------Add data ----------//\n//! add to local storage\nfunction addNoteToLocalStorage(notesArray) {\n  window.localStorage.setItem(\"notes\", JSON.stringify(notesArray));\n}\n\n//---------Get data--------//\n\n// //! get from local storage\nfunction getNotesFromLocalStorage() {\n  let localNotes = window.localStorage.getItem(\"notes\");\n  if (localNotes) {\n    let notes = JSON.parse(localNotes);\n    addNotesToUI(notesArray);\n    console.log(notes);\n  }\n}\n\n// remove data fro local storage function //\n\nfunction removeNote(id) {\n  //*this block of code is for guidance only\n  // for (let i = 0; i < notesArray.length; i++) {\n  //   console.log(`${notesArray[i].id}===${id}`);\n  // }\n  //! Active Code\n  notesArray = notesArray.filter((note) => note.id != id);\n  addNoteToLocalStorage(notesArray);\n}\n"]}